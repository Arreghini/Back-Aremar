// Importar las dependencias necesarias
const express = require('express');
const { expressjwt: jwt } = require('express-jwt');
const jwksRsa = require('jwks-rsa');
const cookieParser = require('cookie-parser');
const cors = require('cors');
const routes = require('./routes/index');
const checkAdmin = require('./services/tokenAdministrador');
require('dotenv').config();

// Crear una instancia de la aplicación Express
const app = express();
app.name = 'API';

// Obtener las variables de entorno necesarias
const { AUTH0_DOMAIN, AUTH0_AUDIENCE } = process.env;

// Configurar las opciones de CORS
const corsOptions = {
  origin: ['http://localhost:5173', 'http://localhost:4000'], // Orígenes permitidos
  methods: ['GET', 'POST', 'PATCH', 'DELETE', 'PUT'], // Métodos HTTP permitidos
  allowedHeaders: ['Content-Type', 'Authorization'], // Cabeceras permitidas
  credentials: true // Permitir el envío de cookies
};
app.use(cors(corsOptions));

// Configurar middleware para parsear JSON y cookies
app.use(express.json());
app.use(cookieParser());

// Middleware para registrar las rutas solicitadas
app.use((req, res, next) => {
  console.log(`Ruta solicitada: ${req.method} ${req.originalUrl}`);
  next();
});

// Configurar el middleware de autenticación JWT
const checkJwt = jwt({
  secret: jwksRsa.expressJwtSecret({
    cache: true,
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri: `https://${AUTH0_DOMAIN}/.well-known/jwks.json`
  }),
  audience: AUTH0_AUDIENCE,
  issuer: `https://${AUTH0_DOMAIN}/`,
  algorithms: ['RS256']
});

// Configurar **rutas públicas** bajo `/api/rooms/public` (no requieren autenticación)
app.use('/api/rooms/public', routes);

// Configurar **rutas protegidas** para administración
app.use('/api/rooms/admin', checkJwt, checkAdmin, routes);
app.use('/api/users/admin', checkJwt, checkAdmin, routes);

// Middleware para manejar rutas no encontradas
app.use((req, res, next) => {
  res.status(404).json({ message: 'Ruta no encontrada' });
});

// Middleware para manejar errores
app.use((err, req, res, next) => {
  console.error('Error:', err.message);
  res.status(err.status || 500).json({ message: err.message || 'Ocurrió un error en el servidor' });
});

// Exportar la aplicación para su uso en otros archivos
module.exports = app;

Ahora el tokenAdministrator 
require('dotenv').config();
const jwksRsa = require('jwks-rsa');
const axios = require('axios');
const jwt = require('jsonwebtoken'); // Para firmar/verificar/decodificar tokens
const { expressjwt: jwtMiddleware } = require('express-jwt'); // Para el middleware de autenticación

const { AUTH0_DOMAIN, AUTH0_AUDIENCE, AUTH0_CLIENT_ID, AUTH0_CLIENT_SECRET } = process.env;

const namespace = 'https://aremar.com/';

// Middleware para validar el JWT
const jwtAuthMiddleware = jwtMiddleware({
  secret: jwksRsa.expressJwtSecret({
    cache: true,
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri: `https://${AUTH0_DOMAIN}/.well-known/jwks.json`,
  }),
  audience: AUTH0_AUDIENCE,
  issuer: `https://${AUTH0_DOMAIN}/`,
  algorithms: ['RS256'],
  credentialsRequired: true, // Asegura que el token esté presente
  requestProperty: 'auth',  // Para usar 'req.auth' en lugar de 'req.user'
});

// Cache para el Management API Token
let cachedManagementToken = null;
let tokenExpiryTime = 0;

// Función para obtener el token de la Auth0 Management API
const getManagementApiToken = async () => {
  if (cachedManagementToken && Date.now() < tokenExpiryTime) {
    return cachedManagementToken;
  }

  try {
    const response = await axios.post(`https://${AUTH0_DOMAIN}/oauth/token`, {
      client_id: AUTH0_CLIENT_ID,
      client_secret: AUTH0_CLIENT_SECRET,
      audience: `https://${AUTH0_DOMAIN}/api/v2/`,
      grant_type: 'client_credentials',
    });

    cachedManagementToken = response.data.access_token;
    tokenExpiryTime = Date.now() + response.data.expires_in * 1000; // Guardar el tiempo de expiración
    return cachedManagementToken;
  } catch (error) {
    console.error('Error al obtener el token del Management API:', error);
    throw new Error('Error al obtener el token del Management API');
  }
};

// Función para verificar los roles del usuario
const checkUserRole = async (userId, managementToken) => {
  try {
    // Haz la llamada a Auth0 para obtener los roles del usuario
    const response = await axios.get(`https://${AUTH0_DOMAIN}/api/v2/users/${userId}/roles`, {
      headers: {
        authorization: `Bearer ${managementToken}`, // Token con permisos para la API de gestión
      },
    });

    // Verificar si el usuario tiene el rol de administrador
    const roles = response.data;
    return roles.some(role => role.name === 'admin'); // Cambia 'admin' si el rol tiene otro nombre
  } catch (error) {
    console.error('Error verificando los roles del usuario:', error);
    throw new Error('Error al obtener los roles del usuario');
  }
};

// Middleware para verificar si el usuario es administrador
const checkAdmin = async (req, res, next) => {
  try {
    if (!req.auth || !req.auth.sub) {
      throw new Error('No se pudo obtener la información del usuario del token');
    }

    const userId = req.auth.sub;
    const managementToken = await getManagementApiToken();
    const isAdmin = await checkUserRole(userId, managementToken);

    if (isAdmin) {
      return next();
    } else {
      return res.status(403).json({ message: 'Acceso denegado. Usuario no es administrador.' });
    }
  } catch (error) {
    console.error('Error verificando los roles del usuario:', error);
    return res.status(500).json({ message: 'Error interno verificando los roles.' });
  }
};

// Middleware principal: validar JWT y luego verificar el rol
const jwtAndRoleMiddleware = (req, res, next) => {
  jwtAuthMiddleware(req, res, (err) => {
    if (err) {
      console.error('Error al validar el token:', err);
      if (err.name === 'UnauthorizedError') {
        return res.status(401).json({ message: 'Token inválido o ausente' });
      }
      return res.status(500).json({ message: 'Error interno al procesar el token' });
    }

    // Loguea el token decodificado
    console.log('Token decodificado:', req.auth);
    console.log('req.body:', req.body)

    // Continúa con la verificación de roles
    checkAdmin(req, res, next);
  });
};

module.exports = jwtAndRoleMiddleware;

enrutado

const { Router } = require('express');
const { expressjwt: jwt } = require('express-jwt');
const jwksRsa = require('jwks-rsa');
const { handleSaveUser, handleCheckAdminRole } = require('../handlers/user/userHandler');
const checkAdmin = require('../services/tokenAdministrador');
require('dotenv').config();

const router = Router();

const { AUTH0_DOMAIN, AUTH0_AUDIENCE } = process.env;

// Configuración del middleware JWT
const checkJwt = jwt({
  secret: jwksRsa.expressJwtSecret({
    cache: true,
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri: `https://${AUTH0_DOMAIN}/.well-known/jwks.json`,
  }),
  audience: AUTH0_AUDIENCE, // Debe coincidir con lo configurado en el frontend
  issuer: `https://${AUTH0_DOMAIN}/`,
  algorithms: ['RS256'],
});

// Middleware para validar JWT y agregar información de usuario autenticado
router.use(checkJwt, (req, res, next) => {
  console.log('Respuesta completa de Auth0:', JSON.stringify(req.user, null, 2));
  console.log('Headers de la solicitud:', req.headers);
  next();
});

// Ruta protegida por autenticación, accesible por cualquier usuario autenticado
router.post('/sync', checkJwt, (req, res, next) => {
  console.log('Middleware checkJwt pasado');
  console.log('Solicitud recibida en /sync');
  console.log('Datos recibidos:', req.body);
  console.log('Usuario autenticado:', req.user);
  
  if (!req.user) {
    console.log('req.user is undefined. JWT payload:', req.auth);
    // Si req.user no está definido, usar req.auth
    req.user = req.auth;
  }
  
  next();
}, (req, res, next) => {
  console.log('Antes de llamar a handleSaveUser');
  console.log('req.user:', req.user);
  handleSaveUser(req, res);
});

// Rutas exclusivas para administradores
// Se usa checkAdmin para verificar que el usuario es administrador
router.post('/admin/create', checkAdmin, (req, res) => {
  console.log('Ruta POST /admin/create recibida');
  // Lógica para crear recurso
  res.json({ message: 'Recurso creado por administrador' });
});

router.patch('/admin/update/:id', checkAdmin, (req, res) => {
  console.log('Ruta PATCH /admin/update recibida');
  // Lógica para actualizar recurso
  res.json({ message: `Recurso con ID ${req.params.id} actualizado por administrador` });
});

router.delete('/admin/delete/:id', checkAdmin, (req, res) => {
  console.log('Ruta DELETE /admin/delete recibida');
  // Lógica para eliminar recurso
  res.json({ message: `Recurso con ID ${req.params.id} eliminado por administrador` });
});

module.exports = router;
